buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath "io.qameta.allure:allure-gradle:2.6.0"
    }
}

plugins {
    id 'org.gradle.test-retry' version '1.0.0'
    id 'io.qameta.allure' version '2.8.1'
}

apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'io.qameta.allure'

mainClassName = 'qa-tests'

repositories {
    jcenter()
    mavenCentral()
}

allure {
    version = '2.6.0'
    autoconfigure = true
    aspectjweaver = true
    allureJavaVersion = '2.6.0'
}

ext {
    junitVeriosn = '4.13.2'
    javafaker = '1.0.2'
    webdrivermanager = '4.4.3'
    ownerBits = '1.0.12'
    jacksonCore = '2.12.3'
    allure = '2.13.9'
    selenium = '3.141.59'
    json = '20180130'
    allureAnnotations = '1.5.4'
    allureJunit4 = '2.13.9'
}

compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'

dependencies {
    implementation("junit:junit:${junitVeriosn}",
            "com.github.javafaker:javafaker:${javafaker}",
            "io.github.bonigarcia:webdrivermanager:${webdrivermanager}",
            "org.aeonbits.owner:owner:${ownerBits}",
            "com.fasterxml.jackson.core:jackson-core:${jacksonCore}",
            "io.qameta.allure:allure-java-commons:${allure}",
            "org.seleniumhq.selenium:selenium-java:${selenium}",
            "org.json:json:${json}",
            "ru.yandex.qatools.allure:allure-java-annotations:${allureAnnotations}",
            "io.qameta.allure:allure-junit4:${allureJunit4}")
}

test {
    outputs.upToDateWhen { false }
    reports {
        junitXml.enabled = true
        html.enabled = true
    }
}

task sanityTest(type: Test) {
    outputs.upToDateWhen { false }
    useJUnit {
        includeCategories 'pages.SanityTests'
    }
}

task smokeTest(type: Test) {
    outputs.upToDateWhen { false }
    useJUnit {
        includeCategories 'pages.SmokeTests'
    }
}

test {
    if (project.hasProperty('maxParallelForks'))
        maxParallelForks = project.maxParallelForks as int
    if (project.hasProperty('forkEvery'))
        forkEvery = project.forkEvery as int
}

tasks.withType(Test) {
    systemProperty 'env', System.getProperty('env', 'env')
}

//noinspection GroovyAssignabilityCheck
tasks.withType(Test) {
    testLogging {
        events 'started', 'passed'
    }
}

tasks.withType(Test) {
    systemProperties["junit.jupiter.execution.parallel.enabled"] = true
    systemProperties["junit.jupiter.execution.parallel.mode.default"] = "concurrent"
    maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
}

test {
    retry {
        failOnPassedAfterRetry = true
        maxFailures = 42
        maxRetries = 1
    }
}
